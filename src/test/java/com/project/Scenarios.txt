


URL: https://reqres.in/

GET


LIST USERS



1.0 --> list_user.feature

1.1 Scenario: List all users from first/second page

1.2 Scenario: Verify that Content-Type is "application/json; charset=utf-8" for first/second page

1.3 Scenario: Verify that host is "reqres.in" for first/second page


1.4 Scenario: Verify that connection is "keep-alive" for first/second page

1.5 Scenario: Check if the response time is less then 250 for first/second page


1.6 Scenario: Verify page, per_page, total, total_pages for first/second page


1.7 Scenario Outline: List all users


1.8 Scenario: Check if support url is working for first/second page


1.9 Scenario: List all user first names from first/second page


1.10 Scenario Outline: List all user names whose ids are odd


1.11 Scenario Outline:Check if each email address contains first name


1.12 Scenario Outline:Verify that if given ids and first_names match




SINGLE USER

2.0 -->single_user.feature

2.1 Scenario: Verify id, email, first_name,last_name for first/second page  

2.2  Scenario Outline: Check if the id from response matches with given id


2.3  Scenario Outline: Check if the avatars of given id is accessible


2.4  Scenario Outline: Access the single user page with invalid ids and verify that status code 404








4.0-->list_resources.feature


4.1  Scenario: Verify page, per_page, total, total_pages


 4.2 Scenario: List all data with 2000 and 2001 years


4.3 Scenario:Verify that all color codes starts with "#" and have 7 characters (including "#")


4.4 Scenario: Verify that all the value of pantone_values in following format "##-####"


4.5 Scenario: Verify the year of second element of data is 2001



4.6 Scenario: Verify the value of text in support is "To keep ReqRes free, contributions towards server costs are appreciated!"



4.7 Scenario: Verify that each element of response is not null






5.0--> single_resource.feature

5.1 Scenario Outline: Verify the name,year of users with following ids 1,2,3,4

5.2 Scenario: Verify that if the url of support is working

5.3 Scenario: Verify that single resource with invalid id gives the 404 statuscode and response is {}





POST & PUT & PATCH & DELETE 

7.0 --> createPostPutPatchDelete.feature

7.1  Scenario: Create a user with certain name and job and verify if it is created


7.2 Scenario Outline: Create multiple users with given data and verify if all of them are created

7.3 Scenario: Update one user and verify if it is updated (put)

7.4 Scenario Outline: Update users with following ids 134,135,136 (put)


7.5 Scenario: Update one user and verify if it is updated (patch)

7.6 Scenario Outline: Update users with following ids 121,122,123 (patch)


7.7 Scenario: Delete one user and verify if it is delted (delete)

7.8 Scenario Outline: Delete users with following ids 121,122,123 (delete)


REGISTER

8.0 --> registerLogin.feature

8.1 Scenario: Register a user with given email and password and verify if token is not null

8.2 Scenario Outline: Register 4 diffirent users with given emails and passwords and verify if tokens are not null


8.3 Scenario: Try to register a user with a given email and verify if error message is "Missing password"

8.4 Scenario Outline: Try to register 4 different users with given emails and verify that  error message is "Missing password" for each of them


8.5 Scenario: Login a valid email and password and verify if token is not null

8.6 Scenario Outline: Login 4 diffirent users with valid emails and passwords and verify if tokens are not null


8.7 Scenario: Try to login with an email and verify if error message is "Missing password"

8.8 Scenario Outline: Try to login as 4 different users with given emails and verify that  error message is "Missing password" for each of them



DELAYED RESPONSE

9.0 --> delayedResponse.feature

9.1 Scenario: Delay response for 2 seconds and verify that response time is bigger then delay time

9.2 Scenario Outline: Delay response for 2,3,4,5 seconds for each time and verify that response times are bigger then delay times















